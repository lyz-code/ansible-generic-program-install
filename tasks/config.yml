---
# Download the repositories
- name: Set clone url for ssh protocol
  set_fact:
    repo_url: "{{ config.git_repo }}/{{ program_name }}.git"
  when: repo_url is not defined and 'ssh://' in config.git_repo

- name: Set clone url for https protocol
  set_fact:
    repo_url: "{{ config.git_repo }}/{{ program_name }}"
  when: repo_url is not defined and 'ssh://' not in config.git_repo

- name: Clone the config repository
  git:
    repo: "{{ repo_url }}"
    dest: "{{ config.directory }}/{{ program_name }}"
    version: "master"
  retries: 3
  register: clone_status
  until: clone_status.after is defined

- name: Try to change to the hostname branch
  git:
    repo: "{{ repo_url }}"
    dest: "{{ config.directory }}/{{ program_name }}"
    version: "{{ ansible_hostname }}"
  failed_when: false
  retries: 2
  until: clone_status.after is defined
  register: clone_status

- name: Remove the .git directory if desired
  file:
    path: "{{ config.directory }}/{{ program_name }}.git"
    state: absent
  when: remove_git

# Create the links for the files and directories not protected

- name: Generic | Register links to create
  shell: ls -A {{ config.directory }}/{{ program_name }}
  register: elements_to_copy
  changed_when: false
  failed_when: false

- name: Generic | Register the status of the files
  stat:
    path: "~/{{ item }}"
  with_items: "{{ elements_to_copy.stdout_lines }}"
  register: elements_to_copy_status

- name: Generic | Remove original files
  file:
    path: "{{ item.invocation.module_args.path }}"
    state: absent
  with_items: "{{ elements_to_copy_status.results }}"
  when:
    - (item.stat.islnk is not defined) or (item.stat.islnk is defined and not item.stat.islnk)
    - item.item != ".git"
    - item.item != ".gitignore"
    - item.item not in protected_directories

- name: Generic | Create symbolic links
  file:
    dest: "{{ item.invocation.module_args.path }}"
    src: "{{ config.directory }}/{{ program_name }}/{{ item.item }}"
    state: link
  with_items: "{{elements_to_copy_status.results}}"
  when:
    - (item.stat.islnk is not defined) or (item.stat.islnk is defined and not item.stat.islnk)
    - item.item != ".git"
    - item.item != ".gitignore"
    - item.item not in protected_directories

# Create the links for the files/directories into the .config directory
- name: Config | Register links to create
  shell: ls -A {{ config.directory }}/{{ program_name }}/.config
  register: elements_to_copy
  changed_when: false
  failed_when: false

- name: Config | Register the status of the files
  stat:
    path: "~/.config/{{ item }}"
  with_items: "{{ elements_to_copy.stdout_lines }}"
  register: elements_to_copy_status

- name: Config | Test the .config directory exists
  file:
    path: "~/.config"
    state: directory

- name: Config | Remove original files
  file:
    path: "{{ item.invocation.module_args.path }}"
    state: absent
  with_items: "{{ elements_to_copy_status.results }}"
  when:
    - (item.stat.islnk is not defined) or (item.stat.islnk is defined and not item.stat.islnk)
    - item.item != ".git"
    - item.item != ".gitignore"
    - item.item not in protected_directories

- name: Config | Create symbolic links
  file:
    dest: "{{ item.invocation.module_args.path }}"
    src: "{{ config.directory }}/{{ program_name }}/.config/{{ item.item }}"
    state: link
  with_items: "{{elements_to_copy_status.results}}"
  when:
    - (item.stat.islnk is not defined) or (item.stat.islnk is defined and not item.stat.islnk)
    - item.item != ".git"
    - item.item != ".gitignore"
    - item.item not in protected_directories

# Create the links for the files/directories into .local/share
- name: Share | Register links to create
  shell: ls -A {{ config.directory }}/{{ program_name }}/.local/share
  register: elements_to_copy
  changed_when: false
  failed_when: false

- name: Share | Register the status of the files
  stat:
    path: "~/.local/share/{{ item }}"
  with_items: "{{ elements_to_copy.stdout_lines }}"
  register: elements_to_copy_status

- name: Share | Test the .config directory exists
  file:
    path: "~/.local/share"
    state: directory

- name: Share | Remove original files
  file:
    path: "{{ item.invocation.module_args.path }}"
    state: absent
  with_items: "{{ elements_to_copy_status.results }}"
  when:
    - (item.stat.islnk is not defined) or (item.stat.islnk is defined and not item.stat.islnk)
    - item.item != ".git"
    - item.item != ".gitignore"
    - item.item not in protected_directories

- name: Share | Create symbolic links
  file:
    dest: "{{ item.invocation.module_args.path }}"
    src: "{{ config.directory }}/{{ program_name }}/.local/share/{{ item.item }}"
    state: link
  with_items: "{{elements_to_copy_status.results}}"
  when:
    - (item.stat.islnk is not defined) or (item.stat.islnk is defined and not item.stat.islnk)
    - item.item != ".git"
    - item.item != ".gitignore"
    - item.item not in protected_directories
